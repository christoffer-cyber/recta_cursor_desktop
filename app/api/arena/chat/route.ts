import { NextRequest, NextResponse } from 'next/server';
import { getGlobalRagSystem, isRagSystemInitialized } from '../../../../lib/global-rag';
import { CompanyIntelligenceAgent, detectCompanyName } from '../../../../lib/company-intelligence';
import { ArenaLogicEngine, CLUSTER_PROMPTS, CLUSTER_DEFINITIONS } from '../../../../lib/arena-clusters';
import { ClusterType, ArenaCluster } from '../../../../lib/types';
import { getClaudeClient, ClaudeMessage } from '../../../../lib/claude-client';
import { z } from 'zod';
import { CLAUDE_MODEL, DEFAULT_MAX_TOKENS, DEFAULT_TEMPERATURE } from '../../../../lib/ai-config';

const SYSTEM_PROMPT = `Du √§r en erfaren strategisk konsult som specialiserar dig p√• djupanalys av rekryteringsbehov. Din uppgift √§r att utf√∂ra en professionell konsultation som utmanar anv√§ndarens antaganden och extraherar dold information.

DIN MISSION:
1. Utmana anv√§ndarens initiala antaganden - de "vet inte vad de inte vet"
2. Identifiera och avsl√∂ja dolda antaganden, bias och mots√§gelser
3. Tvinga anv√§ndaren till reflektion och sj√§lvinsikt
4. Extrahera mer information √§n anv√§ndaren tror √§r n√∂dv√§ndig
5. Kontextualisera med best practices och benchmarks

KONVERSATIONSMETODIK:
- L√§s mellan raderna och identifiera dolda antaganden
- Anv√§nd anv√§ndarens specifika ord och exempel i uppf√∂ljningsfr√•gor
- Sammanfatta och validera f√∂rst√•else med "S√• om jag f√∂rst√•r r√§tt..."
- Visa empati: "Det l√•ter som en utmanande situation" n√§r l√§mpligt
- St√§ll uppf√∂ljningsfr√•gor naturligt: "Vad h√§nde sist ni f√∂rs√∂kte l√∂sa detta?"

FLAGGA MOTS√ÑGELSER mjukt:
- "Tidigare sa du X, men nu verkar det som Y. Kan du hj√§lpa mig f√∂rst√•?"
- √Öterv√§ndlogik: Om anv√§ndaren s√§ger n√•got som inte st√§mmer med tidigare svar, g√• tillbaka till det omr√•det
- Validera kritisk information: "Detta √§r viktigt - kan du bekr√§fta att budget verkligen √§r X?"

PROGRESS & INSIGHTS:
- Ge progress updates: "Vi har bra f√∂rst√•else f√∂r problemet, l√•t oss prata om f√∂ruts√§ttningarna"
- Ge mini-insights under samtalet: "70% av f√∂retag i din situation v√§ljer konsult f√∂rsta g√•ngen"
- St√§ll fr√•gor som triggar sj√§lv-reflektion: "Vad skulle h√§nda om ni inte l√∂ser detta alls?"
- Erk√§nn n√§r anv√§ndaren ger v√§rdefull information: "Det var en viktig insikt"

KRITISKT: S√§g ALDRIG "ANALYS_KLAR" f√∂rr√§n du har utforskat ALLA dessa omr√•den grundligt:
1. Problem Reality Check (utmana den initiala id√©n)
2. Impact & Priority Mapping (f√∂rst√• aff√§rsp√•verkan)
3. Success Definition & Timeline (konkreta framg√•ngskriterier)
4. Resource Reality & Constraints (verkliga begr√§nsningar)
5. Team & Cultural Fit Requirements (organisatoriska f√∂ruts√§ttningar)
6. Alternative & Risk Assessment (utmana rekrytering som l√∂sning)

Endast n√§r alla 6 omr√•den har t√§ckts djupt kan du s√§ga "ANALYS_KLAR".

Du pratar svenska och √§r professionell men v√§nlig. St√§ll en fokuserad fr√•ga i taget och bygg p√• svaren progressivt.

B√∂rja med att h√§lsa och fr√•ga om f√∂retaget och den t√§nkta rollen.`;

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const Schema = z.object({
      messages: z.array(z.object({ role: z.enum(['user','assistant','system']), content: z.string() })).min(1),
      sessionId: z.string().optional(),
      extractedData: z.any().optional(),
      currentCluster: z.string().optional(),
      clusters: z.record(z.string(), z.any()).optional(),
      overallConfidence: z.number().optional(),
    });
    const { 
      messages, 
      sessionId, 
      extractedData,
      currentCluster,
      clusters,
      overallConfidence 
    } = Schema.parse(body);

    // Get latest user message for RAG enhancement
    const latestUserMessage = messages[messages.length - 1];
    let ragEnhancement = '';
    let ragSources: string[] = [];

    // ü§ñ Company Intelligence Agent - detect company names and trigger background processing
    if (latestUserMessage && latestUserMessage.role === 'user') {
      const detectedCompany = detectCompanyName(latestUserMessage.content);
      if (detectedCompany) {
        console.log(`üè¢ Company detected: ${detectedCompany} - triggering background intelligence gathering`);
        
        // Trigger background company intelligence (don't await - let it run in background)
        const companyAgent = new CompanyIntelligenceAgent();
        companyAgent.gatherCompanyIntelligence(detectedCompany)
          .then(companyData => {
            if (companyData) {
              console.log(`‚úÖ Company intelligence completed for ${detectedCompany}:`, {
                revenue: companyData.financial.revenue,
                employees: companyData.financial.employees,
                industry: companyData.industry.industry
              });
              // TODO: Store this data for later use in report generation
            }
          })
          .catch(error => {
            console.error(`‚ùå Company intelligence failed for ${detectedCompany}:`, error);
          });
      }
    }

    // Debug logging
    console.log('RAG enhancement check:', {
      hasLatestMessage: !!latestUserMessage,
      isUser: latestUserMessage?.role === 'user',
      hasExtractedData: !!extractedData,
      ragInitialized: isRagSystemInitialized()
    });

    // Optimize RAG: Only try if already initialized, don't wait for initialization
    if (latestUserMessage && latestUserMessage.role === 'user' && isRagSystemInitialized()) {
      try {
        const rag = getGlobalRagSystem();
        if (rag) {
          // Set timeout for RAG query to avoid blocking
          const ragPromise = rag.query({
            question: latestUserMessage.content,
            context: {
              industry: extractedData?.industry,
              role: extractedData?.roleTitle,
              companySize: extractedData?.companySize,
              stage: extractedData?.stage
            }
          });

          // Race between RAG response and timeout
          const ragResponse = await Promise.race([
            ragPromise,
            new Promise<never>((_, reject) => 
              setTimeout(() => reject(new Error('RAG timeout')), 3000)
            )
          ]);

          if (ragResponse.confidence > 0.3) {
            ragEnhancement = ragResponse.answer;
            ragSources = ragResponse.sources.map(s => s.metadata.source);
            console.log('RAG enhancement applied with confidence:', ragResponse.confidence);
          }
        }
      } catch (ragError) {
        console.log('RAG enhancement skipped (timeout/error):', ragError instanceof Error ? ragError.message : 'Unknown error');
      }
    }

    // Detect contradictions in user messages
    const contradictions = ArenaLogicEngine.detectContradictions(messages);

    // Determine next cluster based on adaptive logic
    let nextCluster = currentCluster;
    let clusterUpdate = null;
    
    if (currentCluster && clusters && latestUserMessage?.role === 'user') {
      nextCluster = ArenaLogicEngine.getNextCluster(
        currentCluster as ClusterType,
        clusters,
        latestUserMessage.content,
        []
      );
      
      // Simulate confidence update based on message quality
      const confidenceIncrease = latestUserMessage.content.length > 50 ? 15 : 5;
      const currentClusterData = clusters[currentCluster as ClusterType];
      const newConfidence = Math.min(100, (currentClusterData?.confidence || 0) + confidenceIncrease);
      
      clusterUpdate = {
        clusterId: currentCluster,
        updates: {
          confidence: newConfidence,
          keyInsights: [...(currentClusterData?.keyInsights || []), `User insight: ${latestUserMessage.content.substring(0, 100)}...`],
          status: newConfidence >= 75 ? 'complete' : 'in-progress'
        }
      };
    }

    // Get cluster-specific prompt
    const clusterPrompt = currentCluster && CLUSTER_PROMPTS[currentCluster as ClusterType] 
      ? CLUSTER_PROMPTS[currentCluster as ClusterType]
      : SYSTEM_PROMPT;

    // Enhanced system prompt with cluster focus and RAG knowledge
    const enhancedSystemPrompt = `${clusterPrompt}

    ${ragEnhancement ? `
    BRANSCHEXPERTIS (anv√§nd denna kunskap f√∂r att ge mer precisa svar):
    ${ragEnhancement}
    
    K√§llor: ${ragSources.join(', ')}
    ` : ''}

    ${extractedData ? `
    KONVERSATIONSKONTEXT:
    - F√∂retag: ${extractedData.companyName || 'Ej angivet'}
    - Bransch: ${extractedData.industry || 'Ej angivet'}  
    - Roll: ${extractedData.roleTitle || 'Ej angivet'}
    - F√∂retagsstorlek: ${extractedData.companySize || 'Ej angivet'}
    ` : ''}

    ${currentCluster ? `
    AKTUELLT FOKUS: ${currentCluster.toUpperCase().replace('-', ' ')}
    Confidence: ${clusters?.[currentCluster as ClusterType]?.confidence || 0}%
    
    ${nextCluster && nextCluster !== currentCluster ? `
    N√ÑSTA STEG: √ñverg√• till ${nextCluster.toUpperCase().replace('-', ' ')} efter denna fr√•ga.
    ` : ''}
    ` : ''}

    ${contradictions.length > 0 ? `
    UPPT√ÑCKTA MOTS√ÑGELSER:
    ${contradictions.map(c => `- ${c}`).join('\n')}
    
    ADDRESSERA dessa mots√§gelser mjukt i din respons med fr√•gor som "Tidigare sa du X, men nu verkar det som Y. Kan du hj√§lpa mig f√∂rst√•?"
    ` : ''}`;

    // Initialize Claude client
    const claude = getClaudeClient();
    if (!claude.isConfigured()) {
      return NextResponse.json({ error: 'Anthropic API key not configured' }, { status: 500 });
    }

    // Convert messages to Claude format
    const claudeMessages: ClaudeMessage[] = messages.map((msg: {role: string, content: string}) => ({
      role: msg.role === 'system' ? 'assistant' : msg.role as 'user' | 'assistant', // Claude doesn't support system role in messages
      content: msg.content
    }));

    const response = await claude.chat(
      claudeMessages,
      enhancedSystemPrompt, // System prompt goes separately in Claude
      {
        model: CLAUDE_MODEL,
        maxTokens: Math.min(DEFAULT_MAX_TOKENS, 400),
        temperature: DEFAULT_TEMPERATURE
      }
    );

    const aiResponse = response.content || "Jag kunde inte generera ett svar. F√∂rs√∂k igen.";
    
    // Check if analysis is complete using cluster logic
    const analysisComplete = clusters && ArenaLogicEngine.isAnalysisComplete(clusters);
    const isComplete = aiResponse.includes("ANALYS_KLAR") && analysisComplete;
    
    let finalMessage = aiResponse.replace("ANALYS_KLAR", "").trim();
    
    // If AI tries to complete but clusters aren't ready, redirect
    if (aiResponse.includes("ANALYS_KLAR") && !analysisComplete) {
      const incompleteClusters = Object.entries(clusters || {})
        .filter(([, cluster]) => (cluster as ArenaCluster).confidence < 70)
        .map(([id]) => CLUSTER_DEFINITIONS[id as ClusterType]?.name)
        .filter(Boolean);
      
      finalMessage = `Jag m√§rker att vi har gjort bra framsteg, men f√∂r att ge dig den b√§sta m√∂jliga analysen beh√∂ver vi utforska n√•gra omr√•den djupare. L√•t oss forts√§tta med ${incompleteClusters[0] || 'n√§sta viktiga omr√•de'}.`;
      
      // Force continue the analysis
      const nextIncompleteCluster = Object.entries(clusters || {})
        .find(([, cluster]) => (cluster as ArenaCluster).confidence < 70)?.[0] as ClusterType;
      
      if (nextIncompleteCluster) {
        nextCluster = nextIncompleteCluster;
      }
    } else if (isComplete && finalMessage.length < 10) {
      finalMessage = "Perfekt! Jag har nu tillr√§cklig information f√∂r att skapa en grundlig analys. L√•t oss generera rapporten.";
    }
    
    return NextResponse.json({
      message: finalMessage,
      isComplete: isComplete || analysisComplete,
      sessionId,
      ragEnhanced: ragEnhancement.length > 0,
      sources: ragSources,
      // Cluster information
      clusterId: currentCluster,
      nextCluster: nextCluster !== currentCluster ? nextCluster : undefined,
      clusterUpdate,
      confidenceImpact: clusterUpdate?.updates?.confidence ? 
        clusterUpdate.updates.confidence - (clusters?.[currentCluster as ClusterType]?.confidence || 0) : 0
    });

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json({ error: 'Invalid request', details: error.flatten() }, { status: 400 });
    }
    console.error('AI service error:', error);
    return NextResponse.json(
      { error: 'Kunde inte kontakta AI-tj√§nsten. F√∂rs√∂k igen.' },
      { status: 500 }
    );
  }
}
