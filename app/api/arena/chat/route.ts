import { NextRequest, NextResponse } from 'next/server';
import { getGlobalRagSystem, isRagSystemInitialized } from '../../../../lib/global-rag';
import { CompanyIntelligenceAgent, detectCompanyName } from '../../../../lib/company-intelligence';
import { ArenaLogicEngine, CLUSTER_PROMPTS, CLUSTER_DEFINITIONS } from '../../../../lib/arena-clusters';
import { ClusterType, ArenaCluster } from '../../../../lib/types';
import { getClaudeClient, ClaudeMessage } from '../../../../lib/claude-client';
import { z } from 'zod';
import { CLAUDE_MODEL, DEFAULT_MAX_TOKENS, DEFAULT_TEMPERATURE } from '../../../../lib/ai-config';

const SYSTEM_PROMPT = `Du √§r en expert p√• strategisk rekrytering och organisationsutveckling. Din uppgift √§r att hj√§lpa f√∂retag att f√∂rbereda sig optimalt innan de p√•b√∂rjar en rekryteringsprocess.

Din mission:
1. Extrahera kritisk information om f√∂retaget, rollen och kontexten
2. Utmana anv√§ndarens antaganden och bias p√• ett konstruktivt s√§tt
3. Hj√§lpa dem identifiera dolda behov och risker
4. S√§kerst√§lla att de har gjort grundarbetet innan rekrytering

Du pratar svenska och √§r professionell men v√§nlig. St√§ll en fr√•ga i taget och bygg p√• svaren progressivt.

KRITISKT: S√§g ALDRIG "ANALYS_KLAR" f√∂rr√§n du har utforskat ALLA dessa omr√•den grundligt:
1. Business Pain Point (verkligt problem bakom behovet)
2. Impact & Urgency (aff√§rskritikalitet och prioritering)
3. Success Reality Check (konkreta, m√§tbara framg√•ngskriterier)
4. Resource Boundaries (realistisk budget och resurser)
5. Organizational Reality (kulturell beredskap och tidigare erfarenheter)
6. Alternative Validation (utmana rekrytering som b√§sta l√∂sning)

Endast n√§r alla 6 omr√•den har t√§ckts djupt kan du s√§ga "ANALYS_KLAR".

Viktiga omr√•den att t√§cka:
- F√∂retagets tillv√§xtfas och strategiska m√•l
- Specifika utmaningar som rollen ska l√∂sa
- Team-dynamik och kulturella aspekter
- Budget och tidslinje
- Tidigare rekryteringsframg√•ngar/misslyckanden
- Konkreta prestationsm√•l f√∂r rollen

B√∂rja med att h√§lsa och fr√•ga om f√∂retaget och den t√§nkta rollen.`;

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('Chat API request received:', { 
      messagesCount: body.messages?.length || 0,
      hasCurrentCluster: !!body.currentCluster,
      hasClusters: !!body.clusters
    });
    const Schema = z.object({
      messages: z.array(z.object({ role: z.enum(['user','assistant','system']), content: z.string() })).min(1),
      sessionId: z.string().optional(),
      extractedData: z.any().optional(),
      currentCluster: z.string().optional(),
      clusters: z.record(z.string(), z.any()).optional(),
      overallConfidence: z.number().optional(),
    });
    const parseResult = Schema.safeParse(body);
    if (!parseResult.success) {
      console.error('Invalid request data:', parseResult.error.issues);
      return NextResponse.json({ 
        error: 'Invalid request data', 
        details: parseResult.error.issues 
      }, { status: 400 });
    }
    
    const { 
      messages, 
      sessionId, 
      extractedData,
      currentCluster,
      clusters,
      overallConfidence 
    } = parseResult.data;

    // Get latest user message for RAG enhancement
    const latestUserMessage = messages[messages.length - 1];
    const ragEnhancement = '';
    const ragSources: string[] = [];

    // ü§ñ Company Intelligence Agent - TEMPORARILY DISABLED FOR DEBUGGING
    console.log('Company Intelligence Agent temporarily disabled for debugging');
    
    // if (latestUserMessage && latestUserMessage.role === 'user') {
    //   try {
    //     const detectedCompany = detectCompanyName(latestUserMessage.content);
    //     if (detectedCompany) {
    //       console.log(`üè¢ Company detected: ${detectedCompany} - triggering background intelligence gathering`);
    //       
    //       // Trigger background company intelligence (don't await - let it run in background)
    //       try {
    //         const companyAgent = new CompanyIntelligenceAgent();
    //         companyAgent.gatherCompanyIntelligence(detectedCompany)
    //           .then(companyData => {
    //             if (companyData) {
    //               console.log(`‚úÖ Company intelligence completed for ${detectedCompany}:`, {
    //                 revenue: companyData.financial.revenue,
    //                 employees: companyData.financial.employees,
    //                 industry: companyData.industry
    //               });
    //               // TODO: Store this data for later use in report generation
    //             }
    //           })
    //           .catch(error => {
    //             console.error(`‚ùå Company intelligence failed for ${detectedCompany}:`, error);
    //           });
    //       } catch (agentError) {
    //         console.error('‚ùå Failed to create CompanyIntelligenceAgent:', agentError);
    //       }
    //     }
    //   } catch (detectionError) {
    //     console.error('‚ùå Company name detection failed:', detectionError);
    //   }
    // }

    // Debug logging
    console.log('RAG enhancement check:', {
      hasLatestMessage: !!latestUserMessage,
      isUser: latestUserMessage?.role === 'user',
      hasExtractedData: !!extractedData,
      ragInitialized: isRagSystemInitialized()
    });

    // RAG SYSTEM - TEMPORARILY DISABLED FOR DEBUGGING
    console.log('RAG system temporarily disabled for debugging');
    
    // // Optimize RAG: Only try if already initialized, don't wait for initialization
    // if (latestUserMessage && latestUserMessage.role === 'user' && isRagSystemInitialized()) {
    //   try {
    //     const rag = getGlobalRagSystem();
    //     if (rag) {
    //       // Set timeout for RAG query to avoid blocking
    //       const ragPromise = rag.query({
    //         question: latestUserMessage.content,
    //         context: {
    //           industry: extractedData?.industry,
    //           role: extractedData?.roleTitle,
    //           companySize: extractedData?.companySize,
    //           stage: extractedData?.stage
    //         }
    //       });

    //       // Race between RAG response and timeout
    //       const ragResponse = await Promise.race([
    //         ragPromise,
    //         new Promise<never>((_, reject) => 
    //           setTimeout(() => reject(new Error('RAG timeout')), 3000)
    //         )
    //       ]);

    //       if (ragResponse.confidence > 0.3) {
    //         ragEnhancement = ragResponse.answer;
    //         ragSources = ragResponse.sources.map(s => s.metadata.source);
    //         console.log('RAG enhancement applied with confidence:', ragResponse.confidence);
    //       }
    //     }
    //   } catch (ragError) {
    //     console.log('RAG enhancement skipped (timeout/error):', ragError instanceof Error ? ragError.message : 'Unknown error');
    //   }
    // }

    // CONTRADICTION DETECTION - RE-ENABLED FOR TESTING
    console.log('Starting contradiction detection...');
    let contradictions: string[] = [];
    try {
      contradictions = ArenaLogicEngine.detectContradictions(messages);
      console.log('Contradiction detection completed:', contradictions);
    } catch (contradictionError) {
      console.error('Contradiction detection failed:', contradictionError);
      contradictions = [];
    }
    
    // CLUSTER LOGIC - RE-ENABLED FOR TESTING
    console.log('Starting cluster logic...', { currentCluster, hasClusters: !!clusters, hasLatestMessage: !!latestUserMessage });
    let nextCluster = currentCluster;
    let clusterUpdate: { clusterId: string; updates: { confidence: number; status: string; lastUpdated: string } } | null = null;
    
    if (currentCluster && clusters && latestUserMessage?.role === 'user') {
      try {
        nextCluster = ArenaLogicEngine.getNextCluster(
          currentCluster as ClusterType,
          clusters,
          latestUserMessage.content,
          [] // No triggers for now
        );
        console.log('Cluster logic completed:', { currentCluster, nextCluster });
      } catch (clusterError) {
        console.error('Cluster logic failed:', clusterError);
        nextCluster = currentCluster;
      }
      
      try {
        // Create cluster update
        clusterUpdate = {
          clusterId: currentCluster,
          updates: {
            confidence: Math.min(100, (clusters[currentCluster]?.confidence || 0) + 10),
            status: 'in-progress' as const,
            lastUpdated: new Date().toISOString()
          }
        };
        console.log('Cluster update created:', clusterUpdate);
      } catch (updateError) {
        console.error('Cluster update failed:', updateError);
        clusterUpdate = null;
      }
    }

    // SYSTEM PROMPT - WITH CLUSTER LOGIC RE-ENABLED
    console.log('Building system prompt with cluster logic...', { currentCluster });
    let clusterPrompt: string;
    try {
      clusterPrompt = currentCluster && CLUSTER_PROMPTS[currentCluster as ClusterType] 
        ? CLUSTER_PROMPTS[currentCluster as ClusterType]
        : SYSTEM_PROMPT;
    } catch (promptError) {
      console.error('Failed to get cluster prompt:', promptError);
      clusterPrompt = SYSTEM_PROMPT;
    }

    let enhancedSystemPrompt: string;
    try {
      enhancedSystemPrompt = `${clusterPrompt}

AKTUELL SESSION:
- Nuvarande kluster: ${currentCluster || 'Ej startat'}
${nextCluster && nextCluster !== currentCluster ? `- N√§sta kluster: ${nextCluster}` : ''}
- Session ID: ${sessionId || 'Ej tillg√§ngligt'}
- Totala meddelanden: ${messages.length}

${contradictions.length > 0 ? `
UPPT√ÑCKTA MOTS√ÑGELSER:
${contradictions.map(c => `- ${c}`).join('\n')}

ADDRESSERA dessa mots√§gelser mjukt i din respons med fr√•gor som "Tidigare sa du X, men nu verkar det som Y. Kan du hj√§lpa mig f√∂rst√•?"
` : ''}

${clusterUpdate ? `
KLUSTER UPPDATERING:
- Kluster: ${clusterUpdate.clusterId}
- F√∂rtroende: ${clusterUpdate.updates.confidence}%
- Status: ${clusterUpdate.updates.status}
` : ''}

FOKUSERA p√• att samla information f√∂r nuvarande kluster: ${currentCluster || 'start'}.
Anv√§nd samma engagerande stil som tidigare - l√§s mellan raderna, st√§ll utmanande fr√•gor och hj√§lp anv√§ndaren att reflektera.`;
      console.log('System prompt built successfully');
    } catch (systemPromptError) {
      console.error('Failed to build system prompt:', systemPromptError);
      enhancedSystemPrompt = SYSTEM_PROMPT; // Fallback
    }

    // Initialize Claude client
    const claude = getClaudeClient();
    if (!claude.isConfigured()) {
      return NextResponse.json({ error: 'Anthropic API key not configured' }, { status: 500 });
    }

    // Convert messages to Claude format
    const claudeMessages: ClaudeMessage[] = messages.map((msg: {role: string, content: string}) => ({
      role: msg.role === 'system' ? 'assistant' : msg.role as 'user' | 'assistant', // Claude doesn't support system role in messages
      content: msg.content
    }));

    let response;
    try {
      response = await claude.chat(
        claudeMessages,
        enhancedSystemPrompt, // System prompt goes separately in Claude
        {
          model: CLAUDE_MODEL,
          maxTokens: Math.min(DEFAULT_MAX_TOKENS, 400),
          temperature: DEFAULT_TEMPERATURE
        }
      );
    } catch (claudeError) {
      console.error('Claude API error:', claudeError);
      return NextResponse.json({ 
        error: 'AI service temporarily unavailable',
        details: claudeError instanceof Error ? claudeError.message : 'Unknown error'
      }, { status: 500 });
    }

    const aiResponse = response.content || "Jag kunde inte generera ett svar. F√∂rs√∂k igen.";
    
    // Check if analysis is complete using cluster logic
    const analysisComplete = clusters && ArenaLogicEngine.isAnalysisComplete(clusters);
    const isComplete = aiResponse.includes("ANALYS_KLAR") && analysisComplete;
    
    let finalMessage = aiResponse.replace("ANALYS_KLAR", "").trim();
    
    // If AI tries to complete but clusters aren't ready, redirect
    if (aiResponse.includes("ANALYS_KLAR") && !analysisComplete) {
      const incompleteClusters = Object.entries(clusters || {})
        .filter(([, cluster]) => (cluster as ArenaCluster).confidence < 70)
        .map(([id]) => CLUSTER_DEFINITIONS[id as ClusterType]?.name)
        .filter(Boolean);
      
      finalMessage = `Jag m√§rker att vi har gjort bra framsteg, men f√∂r att ge dig den b√§sta m√∂jliga analysen beh√∂ver vi utforska n√•gra omr√•den djupare. L√•t oss forts√§tta med ${incompleteClusters[0] || 'n√§sta viktiga omr√•de'}.`;
      
      // Force continue the analysis
      const nextIncompleteCluster = Object.entries(clusters || {})
        .find(([, cluster]) => (cluster as ArenaCluster).confidence < 70)?.[0] as ClusterType;
      
      if (nextIncompleteCluster) {
        nextCluster = nextIncompleteCluster;
      }
    } else if (isComplete && finalMessage.length < 10) {
      finalMessage = "Perfekt! Jag har nu tillr√§cklig information f√∂r att skapa en grundlig analys. L√•t oss generera rapporten.";
    }
    
    return NextResponse.json({
      message: finalMessage,
      isComplete: isComplete || analysisComplete,
      sessionId,
      ragEnhanced: ragEnhancement.length > 0,
      sources: ragSources,
      // Cluster information
      clusterId: currentCluster,
      nextCluster: nextCluster !== currentCluster ? nextCluster : undefined,
      clusterUpdate,
      confidenceImpact: clusterUpdate && currentCluster ? clusterUpdate.updates.confidence - (clusters?.[currentCluster]?.confidence || 0) : 0
    });

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json({ error: 'Invalid request', details: error.flatten() }, { status: 400 });
    }
    console.error('AI service error:', error);
    return NextResponse.json(
      { error: 'Kunde inte kontakta AI-tj√§nsten. F√∂rs√∂k igen.' },
      { status: 500 }
    );
  }
}
