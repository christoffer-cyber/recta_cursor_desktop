import { NextRequest, NextResponse } from 'next/server';
import { getGlobalRagSystem, isRagSystemInitialized } from '../../../../lib/global-rag';
import { CompanyIntelligenceAgent, detectCompanyName } from '../../../../lib/company-intelligence';
import { ArenaLogicEngine, CLUSTER_PROMPTS, CLUSTER_DEFINITIONS } from '../../../../lib/arena-clusters';
import { ClusterType, ArenaCluster } from '../../../../lib/types';
import { getClaudeClient, ClaudeMessage } from '../../../../lib/claude-client';
import { z } from 'zod';
import { CLAUDE_MODEL, DEFAULT_MAX_TOKENS, DEFAULT_TEMPERATURE } from '../../../../lib/ai-config';

const SYSTEM_PROMPT = `Du 칛r en expert p친 strategisk rekrytering och organisationsutveckling. Din uppgift 칛r att hj칛lpa f칬retag att f칬rbereda sig optimalt innan de p친b칬rjar en rekryteringsprocess.

KRITISKA REGLER F칐R SVAR:
- Varje svar f친r MAX inneh친lla EN fr친ga
- B칬rja med en kort bekr칛ftelse p친 anv칛ndarens svar: "Jag f칬rst친r, det inneb칛r troligtvis... Kan du f칬rklara...?"
- H친ll svaren korta och fokuserade (max 2-3 meningar)
- St칛ll EN f칬ljdfr친ga som bygger p친 svaret
- Undvik l친nga f칬rklaringar eller flera fr친gor

Din mission:
1. Extrahera kritisk information om f칬retaget, rollen och kontexten
2. Utmana anv칛ndarens antaganden och bias p친 ett konstruktivt s칛tt
3. Hj칛lpa dem identifiera dolda behov och risker
4. S칛kerst칛lla att de har gjort grundarbetet innan rekrytering

Du pratar svenska och 칛r professionell men v칛nlig. St칛ll en fr친ga i taget och bygg p친 svaren progressivt.

KRITISKT: S칛g ALDRIG "ANALYS_KLAR" f칬rr칛n du har utforskat ALLA dessa omr친den grundligt:
1. Business Pain Point (verkligt problem bakom behovet)
2. Impact & Urgency (aff칛rskritikalitet och prioritering)
3. Success Reality Check (konkreta, m칛tbara framg친ngskriterier)
4. Resource Boundaries (realistisk budget och resurser)
5. Organizational Reality (kulturell beredskap och tidigare erfarenheter)
6. Alternative Validation (utmana rekrytering som b칛sta l칬sning)

Endast n칛r alla 6 omr친den har t칛ckts djupt kan du s칛ga "ANALYS_KLAR".

Viktiga omr친den att t칛cka:
- F칬retagets tillv칛xtfas och strategiska m친l
- Specifika utmaningar som rollen ska l칬sa
- Team-dynamik och kulturella aspekter
- Budget och tidslinje
- Tidigare rekryteringsframg친ngar/misslyckanden
- Konkreta prestationsm친l f칬r rollen

B칬rja med att h칛lsa och fr친ga om f칬retaget och den t칛nkta rollen.`;

export async function POST(request: NextRequest) {
  const sessionStartTime = Date.now();
  
  try {
    const body = await request.json();
    console.log('=== ARENA CHAT SESSION START ===');
    console.log('Session timestamp:', new Date().toISOString());
    console.log('Chat API request received:', { 
      messagesCount: body.messages?.length || 0,
      hasCurrentCluster: !!body.currentCluster,
      hasClusters: !!body.clusters,
      sessionId: body.sessionId
    });
    
    const Schema = z.object({
      messages: z.array(z.object({ role: z.enum(['user','assistant','system']), content: z.string() })).min(1),
      sessionId: z.string().optional(),
      extractedData: z.any().optional(),
      currentCluster: z.string().optional(),
      clusters: z.record(z.string(), z.any()).optional(),
      overallConfidence: z.number().optional(),
    });
    const parseResult = Schema.safeParse(body);
    if (!parseResult.success) {
      console.error('Invalid request data:', parseResult.error.issues);
      return NextResponse.json({ 
        error: 'Invalid request data', 
        details: parseResult.error.issues 
      }, { status: 400 });
    }
    
    const { 
      messages, 
      sessionId, 
      extractedData,
      currentCluster,
      clusters,
      overallConfidence 
    } = parseResult.data;

    // Get latest user message for RAG enhancement
    const latestUserMessage = messages[messages.length - 1];
    const ragEnhancement = '';
    const ragSources: string[] = [];

    // 游뱄 Company Intelligence Agent - TEMPORARILY DISABLED FOR DEBUGGING
    console.log('Company Intelligence Agent temporarily disabled for debugging');
    
    // Debug logging
    console.log('RAG enhancement check:', {
      hasLatestMessage: !!latestUserMessage,
      isUser: latestUserMessage?.role === 'user',
      hasExtractedData: !!extractedData,
      ragInitialized: isRagSystemInitialized()
    });

    // RAG SYSTEM - TEMPORARILY DISABLED FOR DEBUGGING
    console.log('RAG system temporarily disabled for debugging');

    // CONTRADICTION DETECTION - RE-ENABLED FOR TESTING WITH DETAILED LOGGING
    console.log('Starting contradiction detection...', { 
      messagesCount: messages.length,
      messagesTypes: messages.map(m => m.role),
      latestMessage: messages[messages.length - 1]?.content?.substring(0, 100)
    });
    let contradictions: string[] = [];
    try {
      console.log('Calling ArenaLogicEngine.detectContradictions...');
      contradictions = ArenaLogicEngine.detectContradictions(messages);
      console.log('Contradiction detection completed successfully:', { 
        contradictionsCount: contradictions.length,
        contradictions: contradictions
      });
    } catch (contradictionError) {
      console.error('Contradiction detection failed with error:', contradictionError);
      console.error('Error stack:', contradictionError instanceof Error ? contradictionError.stack : 'No stack');
      contradictions = [];
    }
    
    // CLUSTER LOGIC - RE-ENABLED FOR TESTING WITH DETAILED LOGGING
    console.log('Starting cluster logic...', { 
      currentCluster, 
      hasClusters: !!clusters, 
      hasLatestMessage: !!latestUserMessage,
      latestUserMessageRole: latestUserMessage?.role,
      latestUserMessageContent: latestUserMessage?.content?.substring(0, 100)
    });
    let nextCluster = currentCluster;
    let clusterUpdate: { clusterId: string; updates: { confidence: number; status: string; lastUpdated: string } } | null = null;
    
    if (currentCluster && clusters && latestUserMessage?.role === 'user') {
      try {
        console.log('Calling ArenaLogicEngine.getNextCluster...', {
          currentCluster: currentCluster as ClusterType,
          clustersKeys: Object.keys(clusters),
          messageContent: latestUserMessage.content
        });
        nextCluster = ArenaLogicEngine.getNextCluster(
          currentCluster as ClusterType,
          clusters,
          latestUserMessage.content,
          [] // No triggers for now
        );
        console.log('Cluster logic completed successfully:', { currentCluster, nextCluster });
      } catch (clusterError) {
        console.error('Cluster logic failed with error:', clusterError);
        console.error('Cluster error stack:', clusterError instanceof Error ? clusterError.stack : 'No stack');
        nextCluster = currentCluster;
      }
      
      try {
        console.log('Creating cluster update...', {
          currentCluster,
          currentConfidence: clusters[currentCluster]?.confidence || 0,
          clusterExists: !!clusters[currentCluster]
        });
        // Create cluster update
        clusterUpdate = {
          clusterId: currentCluster,
          updates: {
            confidence: Math.min(100, (clusters[currentCluster]?.confidence || 0) + 10),
            status: 'in-progress' as const,
            lastUpdated: new Date().toISOString()
          }
        };
        console.log('Cluster update created successfully:', clusterUpdate);
      } catch (updateError) {
        console.error('Cluster update failed with error:', updateError);
        console.error('Update error stack:', updateError instanceof Error ? updateError.stack : 'No stack');
        clusterUpdate = null;
      }
    }

    // SYSTEM PROMPT - WITH CLUSTER LOGIC RE-ENABLED
    console.log('Building system prompt with cluster logic...', { currentCluster });
    let clusterPrompt: string;
    try {
      clusterPrompt = currentCluster && CLUSTER_PROMPTS[currentCluster as ClusterType] 
        ? CLUSTER_PROMPTS[currentCluster as ClusterType]
        : SYSTEM_PROMPT;
    } catch (promptError) {
      console.error('Failed to get cluster prompt:', promptError);
      clusterPrompt = SYSTEM_PROMPT;
    }

    let enhancedSystemPrompt: string;
    try {
      enhancedSystemPrompt = `${clusterPrompt}

AKTUELL SESSION:
- Nuvarande kluster: ${currentCluster || 'Ej startat'}
${nextCluster && nextCluster !== currentCluster ? `- N칛sta kluster: ${nextCluster}` : ''}
- Session ID: ${sessionId || 'Ej tillg칛ngligt'}
- Totala meddelanden: ${messages.length}

${contradictions.length > 0 ? `
UPPT츿CKTA MOTS츿GELSER:
${contradictions.map(c => `- ${c}`).join('\n')}

ADDRESSERA dessa mots칛gelser mjukt i din respons med fr친gor som "Tidigare sa du X, men nu verkar det som Y. Kan du hj칛lpa mig f칬rst친?"
` : ''}

${clusterUpdate ? `
KLUSTER UPPDATERING:
- Kluster: ${clusterUpdate.clusterId}
- F칬rtroende: ${clusterUpdate.updates.confidence}%
- Status: ${clusterUpdate.updates.status}
` : ''}

FOKUSERA p친 att samla information f칬r nuvarande kluster: ${currentCluster || 'start'}.
Anv칛nd samma engagerande stil som tidigare - l칛s mellan raderna, st칛ll utmanande fr친gor och hj칛lp anv칛ndaren att reflektera.`;
      console.log('System prompt built successfully');
    } catch (systemPromptError) {
      console.error('Failed to build system prompt:', systemPromptError);
      enhancedSystemPrompt = SYSTEM_PROMPT; // Fallback
    }

    // Initialize Claude client
    const claude = getClaudeClient();
    if (!claude.isConfigured()) {
      return NextResponse.json({ error: 'Anthropic API key not configured' }, { status: 500 });
    }

    // Convert messages to Claude format
    const claudeMessages: ClaudeMessage[] = messages.map((msg: {role: string, content: string}) => ({
      role: msg.role === 'system' ? 'assistant' : msg.role as 'user' | 'assistant', // Claude doesn't support system role in messages
      content: msg.content
    }));

    let response;
    try {
      response = await claude.chat(
        claudeMessages,
        enhancedSystemPrompt, // System prompt goes separately in Claude
        {
          model: CLAUDE_MODEL,
          maxTokens: Math.min(DEFAULT_MAX_TOKENS, 10000), // INCREASED: Set to 10000 for safety
          temperature: DEFAULT_TEMPERATURE
        }
      );
    } catch (claudeError) {
      console.error('Claude API error:', claudeError);
      return NextResponse.json({ 
        error: 'AI service temporarily unavailable',
        details: claudeError instanceof Error ? claudeError.message : 'Unknown error'
      }, { status: 500 });
    }

    const aiResponse = response.content || "Jag kunde inte generera ett svar. F칬rs칬k igen.";
    
    // Check if analysis is complete using cluster logic
    const analysisComplete = clusters && ArenaLogicEngine.isAnalysisComplete(clusters);
    const isComplete = aiResponse.includes("ANALYS_KLAR") && analysisComplete;
    
    let finalMessage = aiResponse.replace("ANALYS_KLAR", "").trim();
    
    // If AI tries to complete but clusters aren't ready, redirect
    if (aiResponse.includes("ANALYS_KLAR") && !analysisComplete) {
      const incompleteClusters = Object.entries(clusters || {})
        .filter(([, cluster]) => (cluster as ArenaCluster).confidence < 70)
        .map(([id]) => CLUSTER_DEFINITIONS[id as ClusterType]?.name)
        .filter(Boolean);
      
      finalMessage = `Jag m칛rker att vi har gjort bra framsteg, men f칬r att ge dig den b칛sta m칬jliga analysen beh칬ver vi utforska n친gra omr친den djupare. L친t oss forts칛tta med ${incompleteClusters[0] || 'n칛sta viktiga omr친de'}.`;
      
      // Force continue the analysis
      const nextIncompleteCluster = Object.entries(clusters || {})
        .find(([, cluster]) => (cluster as ArenaCluster).confidence < 70)?.[0] as ClusterType;
      
      if (nextIncompleteCluster) {
        nextCluster = nextIncompleteCluster;
      }
    } else if (isComplete && finalMessage.length < 10) {
      finalMessage = "Perfekt! Jag har nu tillr칛cklig information f칬r att skapa en grundlig analys. L친t oss generera rapporten.";
    }
    
    // SIMPLE SESSION LOGGING - NO FETCH CALLS
    const sessionDuration = Date.now() - sessionStartTime;
    console.log('=== SESSION COMPLETION DATA ===');
    console.log('Session duration (ms):', sessionDuration);
    console.log('Total messages in session:', messages.length);
    console.log('AI response length:', finalMessage.length);
    console.log('Is analysis complete:', isComplete);
    console.log('Analysis complete status:', analysisComplete);
    console.log('Cluster update:', clusterUpdate);
    console.log('Next cluster:', nextCluster);
    console.log('Contradictions found:', contradictions.length);
    console.log('Session ID:', sessionId);
    console.log('=== ARENA CHAT SESSION END ===');
    
    return NextResponse.json({
      message: finalMessage,
      isComplete: isComplete || analysisComplete,
      sessionId,
      ragEnhanced: ragEnhancement.length > 0,
      sources: ragSources,
      // Cluster information
      clusterId: currentCluster,
      nextCluster: nextCluster !== currentCluster ? nextCluster : undefined,
      clusterUpdate,
      confidenceImpact: clusterUpdate && currentCluster ? clusterUpdate.updates.confidence - (clusters?.[currentCluster]?.confidence || 0) : 0
    });

  } catch (error) {
    const sessionDuration = Date.now() - sessionStartTime;
    console.error('=== SESSION ERROR ===');
    console.error('Session duration (ms):', sessionDuration);
    console.error('Error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({ error: 'Invalid request', details: error.flatten() }, { status: 400 });
    }
    console.error('AI service error:', error);
    return NextResponse.json(
      { error: 'Kunde inte kontakta AI-tj칛nsten. F칬rs칬k igen.' },
      { status: 500 }
    );
  }
}
